@using BlazorAppServer.Data.ViewComponents
@using BlazorAppServer.SessionStorage
@using EBazarAppServer.Data.Cart
@inject ItemsInCart currentPage
@inject SearchItems searchItem
@inject NavigationManager UriHelper

@*<div class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
    <a class="navbar-brand" href="">BlazorAppServer</a>
    <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
    <span class="navbar-toggler-icon"></span>
    </button>
    </div>
    </div>

    <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
    <div class="nav-item px-3">
    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
    <span class="oi oi-home" aria-hidden="true"></span> Home
    </NavLink>
    </div>
    <div class="nav-item px-3">
    <NavLink class="nav-link" href="actor">
    <span class="oi oi-list-rich" aria-hidden="true"></span> Actor
    </NavLink>
    </div>
    </nav>
    </div>
*@

<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarColor01" aria-controls="navbarColor01" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarColor01">
            <ul class="navbar-nav me-auto">
                <li class="nav-item">
                    <a class="nav-link active" href="#">
                        Home
                        <span class="visually-hidden">(current)</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/">Movies</a>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">Management</a>
                    <div class="dropdown-menu">
                        <a class="dropdown-item" href="cinema">Cinema</a>
                        <a class="dropdown-item" href="producer">Producer</a>
                        <a class="dropdown-item" href="actor">Actors</a>
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item" href="#">Separated link</a>
                    </div>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Features</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Pricing</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">About</a>
                </li>
            </ul>
            <form class="d-flex" >
                <input   formaction="actionSearch" class="form-control me-sm-2" type="text" placeholder="Search" name="searchString" @bind=searchItemString>
               
            </form>
             <button class="btn btn-secondary my-2 my-sm-0" @onclick="SearchButton_Click">Search</button>
            <div>

                <a class="nav-link">
                    <i class="bi bi-cart4"></i>@currentPage.CurrentPageName
                </a>

            </div>
        </div>
    </div>
</nav>


@code {

    [Inject]
    ISessionStorageService sessionStorage { get; set; }
    [Inject]
    private ShoppingCart _shoppingCart { get; set; }

    public string NameFromSessionStorage { get; set; }
    public int ItemInSessionStorage { get; set; }
    public string Name { get; set; }

    public string searchItemString { get; set; }

    private bool collapseNavMenu = true;

    public string SelectedMovieCount { get; set; }
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await GetNameFromSessionStorage();
        if (firstRender)
        {
            if (string.IsNullOrEmpty(NameFromSessionStorage))
            {
                Name = Guid.NewGuid().ToString();
                await SaveName();
            }
        }
        _shoppingCart.ShoppingCartId = NameFromSessionStorage;
    }

    protected override async Task OnInitializedAsync()
    {
        currentPage.OnChange += () => StateHasChanged();
        var items = _shoppingCart.GetShoppingCartItems();
        SelectedMovieCount = Convert.ToString(items.Count());
        await base.OnInitializedAsync();
    }

    public void SearchButton_Click()
    {
        UriHelper.NavigateTo($"/movie/{searchItemString}",true);
        //searchItem.SetCurrentSearchString(searchItemString);
    }

    protected override async Task OnParametersSetAsync()
    {
        var items = _shoppingCart.GetShoppingCartItems();
        SelectedMovieCount = Convert.ToString(items.Count());
        await base.OnParametersSetAsync();
    }


    async Task GetNameFromSessionStorage()
    {
        NameFromSessionStorage = await sessionStorage.GetItemAsync<string>("name");
        if (string.IsNullOrEmpty(NameFromSessionStorage))
        {
            NameFromSessionStorage = "";
        }
    }
    async Task SaveName()
    {
        await sessionStorage.SetItemAsync("name", Name);
        await GetNameFromSessionStorage();
    }
    async Task RemoveName()
    {
        await sessionStorage.RemoveItemAsync("name");
        await GetNameFromSessionStorage();
        await GetSessionStorageLenght();
    }
    async Task ClearSessionStorage()
    {
        await sessionStorage.ClearAsync();
        await GetNameFromSessionStorage();
        await GetSessionStorageLenght();
    }

    async Task GetSessionStorageLenght()
    {
        ItemInSessionStorage = await sessionStorage.LengthAsync();
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    public void MovieSelectionChanged(int count)
    {
        SelectedMovieCount = Convert.ToString(count);
    }
}
